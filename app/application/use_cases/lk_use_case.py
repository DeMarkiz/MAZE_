from typing import Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timezone
from app.infrastructure.database.models.user import UserModel
from app.infrastructure.database.models.subscribe import SubscriptionModel, PlanName
from app.infrastructure.repositories.user_use_repositories import UserUseRepositories
from app.infrastructure.repositories.subscription_use_repositories import SubscriptionUseRepositories
from app.infrastructure.logging.setup_logger import logger


class LkUseCase:
    def __init__(self, user_repo: UserUseRepositories, subscription_repo: SubscriptionUseRepositories):
        self.user_repo = user_repo
        self.subscription_repo = subscription_repo

    async def execute(self, update: Any, context: Any) -> None:
        user = await UserModel.get_or_none(telegram_id=update.effective_user.id)
        if not user:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        now = datetime.now(timezone.utc)
        if user.is_banned or (user.banned_until and user.banned_until > now):
            ban_msg = "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            if user.banned_until and user.banned_until > now:
                ban_msg = f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {user.banned_until.strftime('%d.%m.%Y %H:%M')}."
            if update.callback_query:
                await update.callback_query.edit_message_text(ban_msg)
            else:
                await update.message.reply_text(ban_msg)
            return

        active_sub = await SubscriptionModel.filter(
            user=user,
            is_active=True,
            end_date__gte=now
        ).order_by("-end_date").select_related("plan").first()

        status = "Free"
        days = 0
        until = "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
        if active_sub and active_sub.plan:
            status = f"‚≠êÔ∏è PRO" if active_sub.plan.name == PlanName.PRO else f"üëë VIP"
            days = (active_sub.end_date - now).days
            until = active_sub.end_date.strftime("%d.%m.%Y")

        text = (
            f"<b>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç @{user.username or user.telegram_id}</b>\n\n"
            f"üíé <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days}\n"
            f"üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> {until}"
        )
        buttons = []
        if active_sub and active_sub.plan:
            buttons.append([InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_sub")])
        buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode="HTML")
            except Exception as e:
                if "Message is not modified" not in str(e):
                    raise
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")

        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        bot_username = (await context.bot.get_me()).username
        referral_link = f"https://t.me/{bot_username}?start=ref_{user.telegram_id}"
        referrals = user.referrals or []
        referrals_text = "\n".join([f"- <code>{uid}</code>" for uid in referrals]) if referrals else "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏."
        referral_block = (
            f"\n\n<b>–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ +5 —Å–æ–æ–±—â–µ–Ω–∏–π!</b>\n"
            f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>{referral_link}</code>\n"
            f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å +5 —Å–æ–æ–±—â–µ–Ω–∏–π!\n"
            f"<i>–ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥—Ä—É–≥ –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.</i>\n"
            f"<i>–ï—Å–ª–∏ –¥—Ä—É–≥ —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞, –ø—É—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É</i> <code>/start ref_{user.telegram_id}</code> <i>–≤—Ä—É—á–Ω—É—é.</i>\n"
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {len(referrals)}\n"
            f"{referrals_text}"
        )
        text += referral_block

        # –§–æ—Ä–º–∏—Ä—É–µ–º reply_markup –±–µ–∑ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞'
        buttons = []
        if active_sub and active_sub.plan:
            buttons.append([InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_sub")])
        buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode="HTML")
            except Exception as e:
                if "Message is not modified" not in str(e):
                    raise
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")