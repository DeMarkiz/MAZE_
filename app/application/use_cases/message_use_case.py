from typing import Any
from datetime import datetime
from app.infrastructure.repositories.user_use_repositories import UserUseRepositories
from app.infrastructure.repositories.message_use_repo import MessageUseRepo
from app.infrastructure.repositories.subscription_use_repositories import SubscriptionUseRepositories
from app.infrastructure.openai.get_answer_by_gpt_openai import GetAnswerByGPTUseRepo
from app.infrastructure.database.models.chat import ChatModel
from app.infrastructure.database.models.message import MessageModel
from app.domain.entities.models.chat import Chat
from app.domain.entities.models.messages import Message
from app.domain.services.subscription_service import SubscriptionService
from app.interfaces.telegram.services.message_sender import MessageSender
from app.application.use_cases.lk_use_case import LkUseCase
from app.infrastructure.redis.fsm_manager import fsm_manager, FSMState
from app.infrastructure.logging.setup_logger import logger
# from app.infrastructure.triggers.trigger_loader import TriggersLoader  # –¢–†–ò–ì–ì–ï–†–´ –û–¢–ö–õ–Æ–ß–ï–ù–´
# from app.infrastructure.triggers.trigger_matcher import TriggerMatcher  # –¢–†–ò–ì–ì–ï–†–´ –û–¢–ö–õ–Æ–ß–ï–ù–´
import json
from pathlib import Path


class MessageUseCase:
    def __init__(self, user_repo: UserUseRepositories, message_repo: MessageUseRepo,
                 subscription_repo: SubscriptionUseRepositories, gpt_repo: GetAnswerByGPTUseRepo):
        self.user_repo = user_repo
        self.message_repo = message_repo
        self.subscription_repo = subscription_repo
        self.gpt_repo = gpt_repo
        self.subscription_service = SubscriptionService()
        self.message_sender = MessageSender()

    async def execute(self, update: Any, context: Any) -> None:
        user_id = update.effective_chat.id
        user_text = update.message.text.strip() if update.message and update.message.text else ""

        if not user_text:
            await self.message_sender.send_error(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        if user_text in ("/lk", "üì± –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"):
            await LkUseCase(self.user_repo, self.subscription_repo).execute(update, context)
            return

        user = await self.user_repo.get_user_by_telegram_id(user_id)
        if not user:
            await self.message_sender.send_error(update, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
        now = datetime.utcnow()
        if user.is_banned or (user.banned_until and user.banned_until > now):
            ban_msg = "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            if user.banned_until and user.banned_until > now:
                ban_msg = f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {user.banned_until.strftime('%d.%m.%Y %H:%M')}."
            await self.message_sender.send_error(update, ban_msg)
            return

        # –ù–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
        if user.is_admin and any(flag in context.user_data for flag in [
            "admin_add_subscription", "admin_remove_subscription", "admin_search_user", "admin_manage_user", "edit_price_plan_id"
        ]):
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_fsm_state = await fsm_manager.get_user_state(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if current_fsm_state == FSMState.IDLE:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self._handle_normal_message(update, context, user, user_text)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
            await self._handle_fsm_message(update, context, user, user_text, current_fsm_state)

    async def _handle_normal_message(self, update: Any, context: Any, user, user_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ FSM)"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è free-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user.subscription_level == "free":
            if user.used_messages >= user.message_limit:
                from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
                bot_username = (await context.bot.get_me()).username
                referral_link = f"https://t.me/{bot_username}?start=ref_{user.telegram_id}"
                text = (
                    "–í–∞—à –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ PRO –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å +5 —Å–æ–æ–±—â–µ–Ω–∏–π!\n\n"
                    f"<b>–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ +5 —Å–æ–æ–±—â–µ–Ω–∏–π!</b>\n"
                    f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>{referral_link}</code>\n"
                    "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!"
                )
                keyboard = [
                    [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å PRO", callback_data="upgrade_pro")]
                ]
                await update.message.reply_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    parse_mode="HTML"
                )
                return
        plan, message_count = await self.subscription_repo.check_subscription_status_by_user(user)
        trigger = self.subscription_service.get_upsell_trigger(plan, len(user_text), message_count)
        if trigger:
            await self.message_sender.send_upsell_offer(update, context, trigger)
            return

        # --- –ü–æ–∏—Å–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤ FSM ---
        # –¢–†–ò–ì–ì–ï–†–´ –û–¢–ö–õ–Æ–ß–ï–ù–´
        # triggers_loader = TriggersLoader()
        # matcher = TriggerMatcher(triggers_loader.TRIGGERS)
        # matched_trigger = matcher.find_similar_trigger(user_text)
        # if matched_trigger and matched_trigger.get("id"):
        #     await fsm_manager.update_user_data(user.telegram_id, {"trigger_id": matched_trigger["id"]})
        # else:
        #     await fsm_manager.update_user_data(user.telegram_id, {"trigger_id": None})
        await fsm_manager.update_user_data(user.telegram_id, {"trigger_id": None})
        # --- END ---

        # --- –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ä—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É ---
        # –°–¶–ï–ù–ê–†–ò–ò –û–¢–ö–õ–Æ–ß–ï–ù–´
        # SCENARIOS_PATH = Path(__file__).parent.parent.parent / "core" / "triggers" / "scenarios.json"
        # with open(SCENARIOS_PATH, "r", encoding="utf-8") as f:
        #     scenarios = json.load(f)
        # scenario_started = False
        # if "–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ" in user_text.lower():
        #     scenario = next((s for s in scenarios if s["name"].startswith("–°—Ü–µ–Ω–∞—Ä–∏–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞")), None)
        #     if scenario:
        #         await fsm_manager.update_user_data(user.telegram_id, {"scenario_id": scenario["id"]})
        #         scenario_started = True
        # elif "–º–æ—Ç–∏–≤–∞—Ü–∏—è" in user_text.lower():
        #     scenario = next((s for s in scenarios if s["name"].startswith("–°—Ü–µ–Ω–∞—Ä–∏–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏")), None)
        #     if scenario:
        #         await fsm_manager.update_user_data(user.telegram_id, {"scenario_id": scenario["id"]})
        #         scenario_started = True
        # else:
        #     await fsm_manager.update_user_data(user.telegram_id, {"scenario_id": None})
        # --- END ---

        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è, –µ—Å–ª–∏ –æ–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª
        # if scenario_started:
        #     await update.message.reply_text(scenario["steps"][0]["text"])
        #     return
        
        await fsm_manager.update_user_data(user.telegram_id, {"scenario_id": None})

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ Chat
        chat_model, _ = await ChatModel.get_or_create(user_id=user.telegram_id, defaults={'id': user.telegram_id})
        chat = Chat(
            id=chat_model.id,
            user=user,
            created_at=chat_model.created_at,
            updated_at=chat_model.updated_at,
            last_message_at=chat_model.last_message_at or datetime.now()
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await MessageModel.create(
            chat=chat_model,
            content=user_text,
            is_from_user=True,
            created_at=datetime.now()
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        history = await self.message_repo.get_history_messages(user=user, max_last_messages=20)
        if not history:
            await self.message_sender.send_error(update, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user.telegram_id}")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        thinking_message = await update.message.reply_text("–î—É–º–∞—é...")
        response_text = await self.gpt_repo.get_answer_from_get_triggers(history, user.telegram_id) or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."
        await MessageModel.create(
            chat=chat_model,
            content=response_text,
            is_from_user=False,
            created_at=datetime.now()
        )

        await context.bot.edit_message_text(
            text=response_text,
            chat_id=user.telegram_id,
            message_id=thinking_message.message_id
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º used_messages –¥–ª—è free-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user.subscription_level == "free":
            user_model = await self.user_repo.get_user_model_by_telegram_id(user.telegram_id)
            if user_model:
                user_model.used_messages = getattr(user_model, 'used_messages', 0) + 1
                await user_model.save(update_fields=["used_messages"])

    async def _handle_fsm_message(self, update: Any, context: Any, user, user_text: str, fsm_state: FSMState):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM"""
        user_id = user.telegram_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é FSM
        await fsm_manager.add_to_conversation_history(user_id, user_text, is_user=True)
        
        if fsm_state == FSMState.WAITING_FOR_QUESTION:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
            await fsm_manager.update_user_data(user_id, {"current_question": user_text})
            await fsm_manager.transition_to(user_id, "question_received")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if len(user_text) < 10:  # –ö–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å
                await fsm_manager.transition_to(user_id, "need_context")
                await update.message.reply_text(
                    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏, —á—Ç–æ–±—ã —è –º–æ–≥ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç."
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
            await self._process_ai_response(update, context, user, user_text)
            
        elif fsm_state == FSMState.WAITING_FOR_CONTEXT:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await fsm_manager.update_user_data(user_id, {"context": user_text})
            await fsm_manager.transition_to(user_id, "context_received")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            question = (await fsm_manager.get_user_data(user_id)).get("current_question", "")
            full_question = f"{question}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {user_text}"
            
            await self._process_ai_response(update, context, user, full_question)
            
        elif fsm_state == FSMState.WAITING_FOR_FOLLOW_UP:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            if user_text.lower() in ["—Å–ø–∞—Å–∏–±–æ", "—Ö–æ—Ä–æ—à–æ", "–ø–æ–Ω—è—Ç–Ω–æ", "–æ–∫"]:
                await fsm_manager.transition_to(user_id, "conversation_end")
                await update.message.reply_text("–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å.")
            else:
                await fsm_manager.transition_to(user_id, "follow_up_received")
                await self._process_ai_response(update, context, user, user_text)
                
        elif fsm_state == FSMState.WAITING_FOR_CONFIRMATION:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç
            if user_text.lower() in ["–¥–∞", "–¥–∞", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–≤–µ—Ä–Ω–æ"]:
                await fsm_manager.transition_to(user_id, "confirmed")
                await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ-—Ç–æ –µ—â–µ?")
            else:
                await fsm_manager.transition_to(user_id, "rejected")
                await update.message.reply_text("–ü–æ–Ω—è–ª, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ-–¥—Ä—É–≥–æ–º—É. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
                
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            await fsm_manager.reset_user_state(user_id)
            await self._handle_normal_message(update, context, user, user_text)

    async def _process_ai_response(self, update: Any, context: Any, user, question: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò —Å FSM"""
        user_id = user.telegram_id
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ Chat
        chat_model, _ = await ChatModel.get_or_create(user_id=user_id, defaults={'id': user_id})
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await MessageModel.create(
            chat=chat_model,
            content=question,
            is_from_user=True,
            created_at=datetime.now()
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        history = await self.message_repo.get_history_messages(user=user, max_last_messages=20)
        if not history:
            await self.message_sender.send_error(update, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user_id}")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        thinking_message = await update.message.reply_text("–î—É–º–∞—é...")
        response_text = await self.gpt_repo.get_answer_from_get_triggers(history, user_id) or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await MessageModel.create(
            chat=chat_model,
            content=response_text,
            is_from_user=False,
            created_at=datetime.now()
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é FSM
        await fsm_manager.add_to_conversation_history(user_id, response_text, is_user=False)
        await fsm_manager.update_user_data(user_id, {"last_response": response_text})
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É—Ç–æ—á–Ω–µ–Ω–∏–π
        await fsm_manager.transition_to(user_id, "response_ready")

        await context.bot.edit_message_text(
            text=response_text,
            chat_id=user_id,
            message_id=thinking_message.message_id
        )

    async def start_conversation_mode(self, update: Any, context: Any, user_id: int):
        """–ù–∞—á–∞—Ç—å —Ä–µ–∂–∏–º –±–µ—Å–µ–¥—ã —Å FSM"""
        await fsm_manager.set_user_state(user_id, FSMState.WAITING_FOR_QUESTION)
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –≤–µ—Å—Ç–∏ —Å –≤–∞–º–∏ –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–µ—Å–µ–¥—É. "
            "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏."
        )

    async def end_conversation_mode(self, update: Any, context: Any, user_id: int):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–∂–∏–º –±–µ—Å–µ–¥—ã"""
        await fsm_manager.reset_user_state(user_id)
        await update.message.reply_text(
            "–†–µ–∂–∏–º –±–µ—Å–µ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ."
        )