from typing import Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

class UserMenuHandler:
    MODES = [
        ("üü¢ Soft", "–ú—è–≥–∫–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Å—Ç–∏–ª—å"),
        ("üî• Toxic", "–ñ—ë—Å—Ç–∫–∏–π, –ø—Ä—è–º–æ–π —Å—Ç–∏–ª—å, –±–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π"),
        ("ü™û Mirror", "–ó–µ—Ä–∫–∞–ª–æ: –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"),
        ("üìñ Philosopher", "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, –≥–ª—É–±–æ–∫–∏–π —Å—Ç–∏–ª—å"),
        ("üòà Humor", "–Æ–º–æ—Ä, –º–µ–º—ã, —Å–∞—Ä–∫–∞–∑–º, –ª—ë–≥–∫–æ—Å—Ç—å")
    ]

    async def show_main_menu(self, update: Any, context: Any):
        keyboard = [
            [InlineKeyboardButton(text="üì± –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="open_lk")],
            [InlineKeyboardButton(text="üíé –ê–ø–≥—Ä–µ–π–¥ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="upgrade")],
        ]
        text = (
            "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "\nüì± <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ –ø—Ä–æ—Ñ–∏–ª–µ–º."
            "\nüíé <b>–ê–ø–≥—Ä–µ–π–¥ –ø–æ–¥–ø–∏—Å–∫–∏</b> ‚Äî –æ—Ç–∫—Ä–æ–π—Ç–µ PRO –∏–ª–∏ VIP-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
        )
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        if hasattr(update, "callback_query") and update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=markup, parse_mode="HTML")
        else:
            await update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")

    async def show_upgrade_menu(self, update: Any, context: Any):
        from app.infrastructure.database.models.subscribe import SubscriptionPlanModel, PlanName
        plans = await SubscriptionPlanModel.filter(is_active=True).all()
        pro = next((p for p in plans if p.name == PlanName.PRO), None)
        vip = next((p for p in plans if p.name == PlanName.VIP), None)
        keyboard = [
            [InlineKeyboardButton(text="‚≠êÔ∏è PRO", callback_data="upgrade_pro")],
            [InlineKeyboardButton(text="üëë VIP", callback_data="upgrade_vip")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")],
        ]
        text = (
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞:</b>\n\n"
            "‚≠êÔ∏è <b>PRO</b>\n"
            f"<i>–¶–µ–Ω–∞: {pro.price_usd if pro else '-'}‚ÇΩ/–º–µ—Å</i>\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "‚Ä¢ –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–æ–≤\n\n"
            "üëë <b>VIP</b>\n"
            f"<i>–¶–µ–Ω–∞: {vip.price_usd if vip else '-'}‚ÇΩ/–º–µ—Å</i>\n"
            "‚Ä¢ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ PRO\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã\n"
        )
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=markup, parse_mode="HTML")

    async def show_modes_menu(self, update: Any, context: Any):
        keyboard = [[InlineKeyboardButton(text=f"{name} ‚Äî {desc}", callback_data=f"set_mode:{i}")] for i, (name, desc) in enumerate(self.MODES)]
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])
        text = (
            "<b>ü§ñ –†–µ–∂–∏–º—ã –±–æ—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n" +
            "\n".join([f"{i+1}. <b>{name}</b> ‚Äî {desc}" for i, (name, desc) in enumerate(self.MODES)])
        )
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=markup, parse_mode="HTML")

    async def set_mode(self, update: Any, context: Any, mode_index: int):
        context.user_data["bot_mode"] = mode_index
        name, desc = self.MODES[mode_index]
        text = f"<b>ü§ñ –†–µ–∂–∏–º –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {name} ‚Äî {desc}"
        await update.callback_query.edit_message_text(text, reply_markup=None, parse_mode="HTML")
        await self.show_main_menu(update, context)

    async def handle_callback(self, update: Any, context: Any, data: str):
        if data == "back_to_main_menu":
            await self.show_main_menu(update, context)
        elif data == "upgrade":
            await self.show_upgrade_menu(update, context)
        elif data == "choose_mode":
            await self.show_modes_menu(update, context)
        elif data.startswith("set_mode:"):
            mode_index = int(data.split(":")[1])
            await self.set_mode(update, context, mode_index)
        elif data in ("upgrade_pro", "upgrade_vip"):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å PaymentUseCase –∏–ª–∏ –¥—Ä—É–≥–æ–π flow –æ–ø–ª–∞—Ç—ã
            await update.callback_query.edit_message_text(
                f"<b>üí≥ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ:</b> {data.replace('upgrade_', '').upper()}\n\n–°–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
                parse_mode="HTML"
            )
        elif data == "open_lk":
            # –í—ã–∑–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            from app.application.use_cases.lk_use_case import LkUseCase
            from app.infrastructure.repositories.user_use_repositories import UserUseRepositories
            from app.infrastructure.repositories.subscription_use_repositories import SubscriptionUseRepositories
            user_repo = UserUseRepositories()
            sub_repo = SubscriptionUseRepositories()
            lk_use_case = LkUseCase(user_repo, sub_repo)
            await lk_use_case.execute(update, context) 
